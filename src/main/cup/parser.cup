package parse;

import error.ErrorManager;
import java_cup.runtime.Symbol;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import absyn.*;

parser code {:
  /* override error routines */
  private Loc locOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               Loc.loc((ComplexSymbol) info) :
               info instanceof Symbol ?
                  Loc.loc((Symbol) info) :
                  Loc.loc(cur_token);
  }
  private String lexemeOfInfo(Object info) {
     return info instanceof ComplexSymbol ?
               " at '" + ((ComplexSymbol) info).getName() + "'" :
               "";

  }
  public void report_fatal_error(String message, Object info) {
     done_parsing();
     ErrorManager.em.fatal(locOfInfo(info), message + lexemeOfInfo(info) + "\nCan't recover from previous error(s), giving up.");
  }
  public void report_error(String message, Object info) {
     ErrorManager.em.error(locOfInfo(info), message + lexemeOfInfo(info));
  }
:};

terminal Double LITNUM;
terminal        PLUS, MINUS, TIMES, DIV;
terminal        LPAREN, RPAREN;

non terminal Exp exp;
non terminal Exp term;
non terminal Exp factor;

start with exp;

exp ::=
  exp:x PLUS term:y      {: RESULT = new ExpBinOp(ExpBinOp.Op.PLUS, x, y); :}
| exp:x MINUS term:y     {: RESULT = new ExpBinOp(ExpBinOp.Op.MINUS, x, y); :}
| term:x                 {: RESULT = x;     :}
;

term ::=
  term:x TIMES factor:y  {: RESULT = new ExpBinOp(ExpBinOp.Op.TIMES, x, y); :}
| term:x DIV factor:y    {: RESULT = new ExpBinOp(ExpBinOp.Op.DIV, x, y); :}
| factor:x               {: RESULT = x;     :}
;

factor ::=
  LITNUM:x               {: RESULT = new ExpNum(x);     :}
| MINUS factor:x         {: RESULT = new ExpNegate(x);  :}
| LPAREN exp:x RPAREN    {: RESULT = x;     :}
;
